"use strict";(self.webpackChunk_project_hami_website=self.webpackChunk_project_hami_website||[]).push([[5495],{3905:(e,i,t)=>{t.d(i,{Zo:()=>u,kt:()=>b});var n=t(7294);function r(e,i,t){return i in e?Object.defineProperty(e,i,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[i]=t,e}function a(e,i){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);i&&(n=n.filter((function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var i=1;i<arguments.length;i++){var t=null!=arguments[i]?arguments[i]:{};i%2?a(Object(t),!0).forEach((function(i){r(e,i,t[i])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(t,i))}))}return e}function o(e,i){if(null==e)return{};var t,n,r=function(e,i){if(null==e)return{};var t,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],i.indexOf(t)>=0||(r[t]=e[t]);return r}(e,i);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],i.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),d=function(e){var i=n.useContext(s),t=i;return e&&(t="function"==typeof e?e(i):l(l({},i),e)),t},u=function(e){var i=d(e.components);return n.createElement(s.Provider,{value:i},e.children)},c={inlineCode:"code",wrapper:function(e){var i=e.children;return n.createElement(n.Fragment,{},i)}},p=n.forwardRef((function(e,i){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=d(t),b=r,g=p["".concat(s,".").concat(b)]||p[b]||c[b]||a;return t?n.createElement(g,l(l({ref:i},u),{},{components:t})):n.createElement(g,l({ref:i},u))}));function b(e,i){var t=arguments,r=i&&i.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=p;var o={};for(var s in i)hasOwnProperty.call(i,s)&&(o[s]=i[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<a;d++)l[d]=t[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5778:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var n=t(7462),r=(t(7294),t(3905));const a={title:"Build HAMi"},l=void 0,o={unversionedId:"developers/build",id:"version-v1.3.0/developers/build",title:"Build HAMi",description:"Make Binary",source:"@site/versioned_docs/version-v1.3.0/developers/build.md",sourceDirName:"developers",slug:"/developers/build",permalink:"/zh/docs/developers/build",draft:!1,editUrl:"https://github.com/karmada-io/website/edit/main/docs/developers/build.md",tags:[],version:"v1.3.0",lastUpdatedBy:"limengxuan",lastUpdatedAt:1713870135,formattedLastUpdatedAt:"2024\u5e744\u670823\u65e5",frontMatter:{title:"Build HAMi"},sidebar:"version-v1.3.0/docs",previous:{title:"globalview",permalink:"/zh/docs/userguide/monitoring/globalview"},next:{title:"Protocol design",permalink:"/zh/docs/developers/protocol"}},s={},d=[{value:"Make Binary",id:"make-binary",level:2},{value:"prequisities",id:"prequisities",level:3},{value:"build",id:"build",level:3},{value:"Make Image",id:"make-image",level:2},{value:"prequisities",id:"prequisities-1",level:3},{value:"build",id:"build-1",level:3},{value:"Make HAMi-Core",id:"make-hami-core",level:2}],u={toc:d};function c(e){let{components:i,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,t,{components:i,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"make-binary"},"Make Binary"),(0,r.kt)("h3",{id:"prequisities"},"prequisities"),(0,r.kt)("p",null,"The following tools are required:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"go v1.20+"),(0,r.kt)("li",{parentName:"ul"},"make")),(0,r.kt)("h3",{id:"build"},"build"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"make\n")),(0,r.kt)("p",null,"If everything are successfully built, the following output are printed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"go build -ldflags '-s -w -X github.com/Project-HAMi/HAMi/pkg/version.version=v0.0.1' -o bin/scheduler ./cmd/scheduler\ngo build -ldflags '-s -w -X github.com/Project-HAMi/HAMi/pkg/version.version=v0.0.1' -o bin/vGPUmonitor ./cmd/vGPUmonitor\ngo build -ldflags '-s -w -X github.com/Project-HAMi/HAMi/pkg/version.version=v0.0.1' -o bin/nvidia-device-plugin ./cmd/device-plugin/nvidia\n")),(0,r.kt)("h2",{id:"make-image"},"Make Image"),(0,r.kt)("h3",{id:"prequisities-1"},"prequisities"),(0,r.kt)("p",null,"The following tools are required:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"docker"),(0,r.kt)("li",{parentName:"ul"},"make")),(0,r.kt)("h3",{id:"build-1"},"build"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"make docker\n")),(0,r.kt)("p",null,"If everything are successfully built, the following output are printed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"go build -ldflags '-s -w -X github.com/Project-HAMi/HAMi/pkg/version.version=v0.0.1' -o bin/scheduler ./cmd/scheduler\ngo build -ldflags '-s -w -X github.com/Project-HAMi/HAMi/pkg/version.version=v0.0.1' -o bin/vGPUmonitor ./cmd/vGPUmonitor\ngo build -ldflags '-s -w -X github.com/Project-HAMi/HAMi/pkg/version.version=v0.0.1' -o bin/nvidia-device-plugin ./cmd/device-plugin/nvidia\n[+] Building 146.4s (28/28)\nFINISHED                                                                                                                                                                                                                                                                     docker:default\n => [internal] load build definition from Dockerfile                                                                                                                                                                                                                                                                     0.0s\n => => transferring dockerfile: 1.30kB                                                                                                                                                                                                                                                                                   0.0s\n => [internal] load metadata for docker.io/nvidia/cuda:12.2.0-base-ubuntu22.04                                                                                                                                                                                                                                           5.5s\n => [internal] load metadata for docker.io/library/golang:1.21-bullseye                                                                                                                                                                                                                                                  4.5s\n => [internal] load metadata for docker.io/nvidia/cuda:12.2.0-devel-ubuntu20.04                                                                                                                                                                                                                                          0.0s\n => [auth] nvidia/cuda:pull token for registry-1.docker.io                                                                                                                                                                                                                                                               0.0s\n => [auth] library/golang:pull token for registry-1.docker.io                                                                                                                                                                                                                                                            0.0s\n => [internal] load .dockerignore                                                                                                                                                                                                                                                                                        0.0s\n => => transferring context: 2B                                                                                                                                                                                                                                                                                          0.0s\n => [internal] load build context                                                                                                                                                                                                                                                                                        1.3s\n => => transferring context: 119.90MB                                                                                                                                                                                                                                                                                    1.3s\n => [stage-3 1/6] FROM docker.io/nvidia/cuda:12.2.0-base-ubuntu22.04@sha256:ecdf8549dd5f12609e365217a64dedde26ecda26da8f3ff3f82def6749f53051                                                                                                                                                                             0.0s\n => CACHED [gobuild 1/4] FROM docker.io/library/golang:1.21-bullseye@sha256:311468bffa9fa4747a334b94e6ce3681b564126d653675a6adc46698b2b88d35                                                                                                                                                                             0.0s\n => [nvbuild 1/9] FROM docker.io/nvidia/cuda:12.2.0-devel-ubuntu20.04                                                                                                                                                                                                                                                    0.0s\n => [gobuild 2/4] ADD . /k8s-vgpu                                                                                                                                                                                                                                                                                        0.8s\n => [nvbuild 2/9] COPY ./libvgpu /libvgpu                                                                                                                                                                                                                                                                                0.3s\n => [nvbuild 3/9] WORKDIR /libvgpu                                                                                                                                                                                                                                                                                       0.2s\n => [nvbuild 4/9] RUN apt-get -y update && apt-get -y install wget                                                                                                                                                                                                                                                      21.9s\n => [gobuild 3/4] RUN apt-get update && apt-get -y install libhwloc-dev libdrm-dev                                                                                                                                                                                                                                      18.8s\n => [gobuild 4/4] RUN cd /k8s-vgpu && make all                                                                                                                                                                                                                                                                          83.5s\n => [nvbuild 5/9] RUN wget https://cmake.org/files/v3.19/cmake-3.19.8-Linux-x86_64.tar.gz                                                                                                                                                                                                                               99.8s\n => CACHED [stage-3 2/6] COPY ./LICENSE /k8s-vgpu/LICENSE                                                                                                                                                                                                                                                                0.0s\n => [stage-3 3/6] COPY --from=GOBUILD /k8s-vgpu/bin /k8s-vgpu/bin                                                                                                                                                                                                                                                        0.5s\n => [stage-3 4/6] COPY ./docker/entrypoint.sh /k8s-vgpu/bin/entrypoint.sh                                                                                                                                                                                                                                                0.2s\n => [stage-3 5/6] COPY ./lib /k8s-vgpu/lib                                                                                                                                                                                                                                                                               0.2s\n => [nvbuild 6/9] RUN tar -xf cmake-3.19.8-Linux-x86_64.tar.gz                                                                                                                                                                                                                                                           2.1s \n => [nvbuild 7/9] RUN cp /libvgpu/cmake-3.19.8-Linux-x86_64/bin/cmake /libvgpu/cmake-3.19.8-Linux-x86_64/bin/cmake3                                                                                                                                                                                                      1.3s \n => [nvbuild 8/9] RUN apt-get -y install openssl libssl-dev                                                                                                                                                                                                                                                              7.7s \n => [nvbuild 9/9] RUN bash ./build.sh                                                                                                                                                                                                                                                                                    4.0s \n => [stage-3 6/6] COPY --from=NVBUILD /libvgpu/build/libvgpu.so /k8s-vgpu/lib/nvidia/                                                                                                                                                                                                                                    0.3s \n => exporting to image                                                                                                                                                                                                                                                                                                   1.8s \n => => exporting layers                                                                                                                                                                                                                                                                                                  1.8s \n => => writing image sha256:fc0ce42b41f9a177921c9bfd239babfa06fc77cf9e4087e8f2d959d749e8039f                                                                                                                                                                                                                             0.0s \n => => naming to docker.io/projecthami/hami:master-103b2b677e018a40af6322a56c2e9d5d5c62cccf                                                                                                                                                                                                                              0.0s \nThe push refers to repository [docker.io/projecthami/hami]    \n")),(0,r.kt)("h2",{id:"make-hami-core"},"Make HAMi-Core"),(0,r.kt)("p",null,"HAMi-Core is recommended to be built in a nvidia/cuda image:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/Project-HAMi/HAMi-core.git\ndocker build . -f dockerfiles/Dockerfile.{arch}\n")))}c.isMDXComponent=!0}}]);