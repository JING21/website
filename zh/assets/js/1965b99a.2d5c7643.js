"use strict";(self.webpackChunk_project_hami_website=self.webpackChunk_project_hami_website||[]).push([[8108],{3905:(e,t,i)=>{i.d(t,{Zo:()=>c,kt:()=>g});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function a(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=d(i),g=r,v=p["".concat(s,".").concat(g)]||p[g]||u[g]||o;return i?n.createElement(v,l(l({ref:t},c),{},{components:i})):n.createElement(v,l({ref:t},c))}));function g(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=i.length,l=new Array(o);l[0]=p;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:r,l[1]=a;for(var d=2;d<o;d++)l[d]=i[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,i)}p.displayName="MDXCreateElement"},9565:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var n=i(7462),r=(i(7294),i(3905));const o={title:"Protocol design"},l=void 0,a={unversionedId:"developers/protocol",id:"version-v1.3.0/developers/protocol",title:"Protocol design",description:"Background",source:"@site/versioned_docs/version-v1.3.0/developers/protocol.md",sourceDirName:"developers",slug:"/developers/protocol",permalink:"/zh/docs/developers/protocol",draft:!1,editUrl:"https://github.com/karmada-io/website/edit/main/docs/developers/protocol.md",tags:[],version:"v1.3.0",lastUpdatedBy:"limengxuan",lastUpdatedAt:1713870135,formattedLastUpdatedAt:"2024\u5e744\u670823\u65e5",frontMatter:{title:"Protocol design"},sidebar:"version-v1.3.0/docs",previous:{title:"Build HAMi",permalink:"/zh/docs/developers/build"},next:{title:"How to cherry-pick PRs",permalink:"/zh/docs/contributor/cherry-picks"}},s={},d=[{value:"Background",id:"background",level:2},{value:"Protocol Implementation",id:"protocol-implementation",level:2},{value:"Protocol",id:"protocol",level:3},{value:"prequisities",id:"prequisities",level:3},{value:"build",id:"build",level:3},{value:"Make Image",id:"make-image",level:2},{value:"prequisities",id:"prequisities-1",level:3},{value:"build",id:"build-1",level:3},{value:"Make HAMi-Core",id:"make-hami-core",level:2}],c={toc:d};function u(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"background"},"Background"),(0,r.kt)("p",null,"The kube-scheduler calls device-plugin to mount devices during the ",(0,r.kt)("inlineCode",{parentName:"p"},"bind")," process, but only the ",(0,r.kt)("inlineCode",{parentName:"p"},"UUID")," of the device is provided to device-plugin. Therefore, in the scenario of device-sharing, device-plugin cannot obtain the specifications of the corresponding device, such as the ",(0,r.kt)("inlineCode",{parentName:"p"},"device memory")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"computing cores")," requested by the task."),(0,r.kt)("p",null,"Therefore, it is necessary to develop a protocol for the scheduler layer to communicate with device-plugin to pass this information"),(0,r.kt)("h2",{id:"protocol-implementation"},"Protocol Implementation"),(0,r.kt)("h3",{id:"protocol"},"Protocol"),(0,r.kt)("h3",{id:"prequisities"},"prequisities"),(0,r.kt)("p",null,"The following tools are required:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"go v1.20+"),(0,r.kt)("li",{parentName:"ul"},"make")),(0,r.kt)("h3",{id:"build"},"build"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"make\n")),(0,r.kt)("p",null,"If everything are successfully built, the following output are printed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"go build -ldflags '-s -w -X github.com/Project-HAMi/HAMi/pkg/version.version=v0.0.1' -o bin/scheduler ./cmd/scheduler\ngo build -ldflags '-s -w -X github.com/Project-HAMi/HAMi/pkg/version.version=v0.0.1' -o bin/vGPUmonitor ./cmd/vGPUmonitor\ngo build -ldflags '-s -w -X github.com/Project-HAMi/HAMi/pkg/version.version=v0.0.1' -o bin/nvidia-device-plugin ./cmd/device-plugin/nvidia\n")),(0,r.kt)("h2",{id:"make-image"},"Make Image"),(0,r.kt)("h3",{id:"prequisities-1"},"prequisities"),(0,r.kt)("p",null,"The following tools are required:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"docker"),(0,r.kt)("li",{parentName:"ul"},"make")),(0,r.kt)("h3",{id:"build-1"},"build"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"make docker\n")),(0,r.kt)("p",null,"If everything are successfully built, the following output are printed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"go build -ldflags '-s -w -X github.com/Project-HAMi/HAMi/pkg/version.version=v0.0.1' -o bin/scheduler ./cmd/scheduler\ngo build -ldflags '-s -w -X github.com/Project-HAMi/HAMi/pkg/version.version=v0.0.1' -o bin/vGPUmonitor ./cmd/vGPUmonitor\ngo build -ldflags '-s -w -X github.com/Project-HAMi/HAMi/pkg/version.version=v0.0.1' -o bin/nvidia-device-plugin ./cmd/device-plugin/nvidia\n[+] Building 146.4s (28/28)\nFINISHED                                                                                                                                                                                                                                                                     docker:default\n => [internal] load build definition from Dockerfile                                                                                                                                                                                                                                                                     0.0s\n => => transferring dockerfile: 1.30kB                                                                                                                                                                                                                                                                                   0.0s\n => [internal] load metadata for docker.io/nvidia/cuda:12.2.0-base-ubuntu22.04                                                                                                                                                                                                                                           5.5s\n => [internal] load metadata for docker.io/library/golang:1.21-bullseye                                                                                                                                                                                                                                                  4.5s\n => [internal] load metadata for docker.io/nvidia/cuda:12.2.0-devel-ubuntu20.04                                                                                                                                                                                                                                          0.0s\n => [auth] nvidia/cuda:pull token for registry-1.docker.io                                                                                                                                                                                                                                                               0.0s\n => [auth] library/golang:pull token for registry-1.docker.io                                                                                                                                                                                                                                                            0.0s\n => [internal] load .dockerignore                                                                                                                                                                                                                                                                                        0.0s\n => => transferring context: 2B                                                                                                                                                                                                                                                                                          0.0s\n => [internal] load build context                                                                                                                                                                                                                                                                                        1.3s\n => => transferring context: 119.90MB                                                                                                                                                                                                                                                                                    1.3s\n => [stage-3 1/6] FROM docker.io/nvidia/cuda:12.2.0-base-ubuntu22.04@sha256:ecdf8549dd5f12609e365217a64dedde26ecda26da8f3ff3f82def6749f53051                                                                                                                                                                             0.0s\n => CACHED [gobuild 1/4] FROM docker.io/library/golang:1.21-bullseye@sha256:311468bffa9fa4747a334b94e6ce3681b564126d653675a6adc46698b2b88d35                                                                                                                                                                             0.0s\n => [nvbuild 1/9] FROM docker.io/nvidia/cuda:12.2.0-devel-ubuntu20.04                                                                                                                                                                                                                                                    0.0s\n => [gobuild 2/4] ADD . /k8s-vgpu                                                                                                                                                                                                                                                                                        0.8s\n => [nvbuild 2/9] COPY ./libvgpu /libvgpu                                                                                                                                                                                                                                                                                0.3s\n => [nvbuild 3/9] WORKDIR /libvgpu                                                                                                                                                                                                                                                                                       0.2s\n => [nvbuild 4/9] RUN apt-get -y update && apt-get -y install wget                                                                                                                                                                                                                                                      21.9s\n => [gobuild 3/4] RUN apt-get update && apt-get -y install libhwloc-dev libdrm-dev                                                                                                                                                                                                                                      18.8s\n => [gobuild 4/4] RUN cd /k8s-vgpu && make all                                                                                                                                                                                                                                                                          83.5s\n => [nvbuild 5/9] RUN wget https://cmake.org/files/v3.19/cmake-3.19.8-Linux-x86_64.tar.gz                                                                                                                                                                                                                               99.8s\n => CACHED [stage-3 2/6] COPY ./LICENSE /k8s-vgpu/LICENSE                                                                                                                                                                                                                                                                0.0s\n => [stage-3 3/6] COPY --from=GOBUILD /k8s-vgpu/bin /k8s-vgpu/bin                                                                                                                                                                                                                                                        0.5s\n => [stage-3 4/6] COPY ./docker/entrypoint.sh /k8s-vgpu/bin/entrypoint.sh                                                                                                                                                                                                                                                0.2s\n => [stage-3 5/6] COPY ./lib /k8s-vgpu/lib                                                                                                                                                                                                                                                                               0.2s\n => [nvbuild 6/9] RUN tar -xf cmake-3.19.8-Linux-x86_64.tar.gz                                                                                                                                                                                                                                                           2.1s \n => [nvbuild 7/9] RUN cp /libvgpu/cmake-3.19.8-Linux-x86_64/bin/cmake /libvgpu/cmake-3.19.8-Linux-x86_64/bin/cmake3                                                                                                                                                                                                      1.3s \n => [nvbuild 8/9] RUN apt-get -y install openssl libssl-dev                                                                                                                                                                                                                                                              7.7s \n => [nvbuild 9/9] RUN bash ./build.sh                                                                                                                                                                                                                                                                                    4.0s \n => [stage-3 6/6] COPY --from=NVBUILD /libvgpu/build/libvgpu.so /k8s-vgpu/lib/nvidia/                                                                                                                                                                                                                                    0.3s \n => exporting to image                                                                                                                                                                                                                                                                                                   1.8s \n => => exporting layers                                                                                                                                                                                                                                                                                                  1.8s \n => => writing image sha256:fc0ce42b41f9a177921c9bfd239babfa06fc77cf9e4087e8f2d959d749e8039f                                                                                                                                                                                                                             0.0s \n => => naming to docker.io/projecthami/hami:master-103b2b677e018a40af6322a56c2e9d5d5c62cccf                                                                                                                                                                                                                              0.0s \nThe push refers to repository [docker.io/projecthami/hami]    \n")),(0,r.kt)("h2",{id:"make-hami-core"},"Make HAMi-Core"),(0,r.kt)("p",null,"HAMi-Core is recommended to be built in a nvidia/cuda image:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/Project-HAMi/HAMi-core.git\ndocker build . -f dockerfiles/Dockerfile.{arch}\n")))}u.isMDXComponent=!0}}]);