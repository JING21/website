"use strict";(self.webpackChunk_project_hami_website=self.webpackChunk_project_hami_website||[]).push([[6234],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=r,v=p["".concat(s,".").concat(m)]||p[m]||u[m]||a;return n?i.createElement(v,o(o({ref:t},c),{},{components:n})):i.createElement(v,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<a;d++)o[d]=n[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5576:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var i=n(7462),r=(n(7294),n(3905));const a={title:"Prequisities"},o=void 0,l={unversionedId:"installation/prequisities",id:"version-v1.3.0/installation/prequisities",title:"Prequisities",description:"Prerequisites",source:"@site/versioned_docs/version-v1.3.0/installation/prequisities.md",sourceDirName:"installation",slug:"/installation/prequisities",permalink:"/docs/installation/prequisities",draft:!1,editUrl:"https://github.com/karmada-io/website/edit/main/docs/installation/prequisities.md",tags:[],version:"v1.3.0",lastUpdatedBy:"limengxuan",lastUpdatedAt:1713177637,formattedLastUpdatedAt:"Apr 15, 2024",frontMatter:{title:"Prequisities"},sidebar:"version-v1.3.0/docs",previous:{title:"Deploy HAMi using helm",permalink:"/docs/get-started/nginx-example"},next:{title:"Online Installation from Helm (Recommended)",permalink:"/docs/installation/online-installation"}},s={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Preparing your GPU Nodes",id:"preparing-your-gpu-nodes",level:2},{value:"Example for debian-based systems with <code>Docker</code> and <code>containerd</code>",id:"example-for-debian-based-systems-with-docker-and-containerd",level:3},{value:"Install the <code>nvidia-container-toolkit</code>",id:"install-the-nvidia-container-toolkit",level:4},{value:"Configure <code>Docker</code>",id:"configure-docker",level:4},{value:"Configure <code>containerd</code>",id:"configure-containerd",level:4},{value:"Label your nodes",id:"label-your-nodes",level:3}],c={toc:d};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://helm.sh/zh/docs/"},"Helm")," version v3+"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/tasks/tools/install-kubectl/"},"kubectl")," version v1.16+"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://developer.nvidia.com/cuda-toolkit"},"CUDA")," version v10.2+"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.nvidia.cn/drivers/unix/"},"NvidiaDriver")," v440+")),(0,r.kt)("h2",{id:"preparing-your-gpu-nodes"},"Preparing your GPU Nodes"),(0,r.kt)("p",null,"Execute the following steps on all your GPU nodes."),(0,r.kt)("p",null,"This README assumes pre-installation of NVIDIA drivers and the ",(0,r.kt)("inlineCode",{parentName:"p"},"nvidia-container-toolkit"),". Additionally, it assumes configuration of the ",(0,r.kt)("inlineCode",{parentName:"p"},"nvidia-container-runtime")," as the default low-level runtime."),(0,r.kt)("p",null,"Please see: ",(0,r.kt)("a",{parentName:"p",href:"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html"},"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html")),(0,r.kt)("h3",{id:"example-for-debian-based-systems-with-docker-and-containerd"},"Example for debian-based systems with ",(0,r.kt)("inlineCode",{parentName:"h3"},"Docker")," and ",(0,r.kt)("inlineCode",{parentName:"h3"},"containerd")),(0,r.kt)("h4",{id:"install-the-nvidia-container-toolkit"},"Install the ",(0,r.kt)("inlineCode",{parentName:"h4"},"nvidia-container-toolkit")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"distribution=$(. /etc/os-release;echo $ID$VERSION_ID)\ncurl -s -L https://nvidia.github.io/libnvidia-container/gpgkey | sudo apt-key add -\ncurl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | sudo tee /etc/apt/sources.list.d/libnvidia-container.list\n\nsudo apt-get update && sudo apt-get install -y nvidia-container-toolkit\n")),(0,r.kt)("h4",{id:"configure-docker"},"Configure ",(0,r.kt)("inlineCode",{parentName:"h4"},"Docker")),(0,r.kt)("p",null,"When running ",(0,r.kt)("inlineCode",{parentName:"p"},"Kubernetes")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"Docker"),", edit the configuration file, typically located at ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/docker/daemon.json"),", to set up ",(0,r.kt)("inlineCode",{parentName:"p"},"nvidia-container-runtime")," as the default low-level runtime:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "default-runtime": "nvidia",\n    "runtimes": {\n        "nvidia": {\n            "path": "/usr/bin/nvidia-container-runtime",\n            "runtimeArgs": []\n        }\n    }\n}\n')),(0,r.kt)("p",null,"And then restart ",(0,r.kt)("inlineCode",{parentName:"p"},"Docker"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo systemctl daemon-reload && systemctl restart docker\n")),(0,r.kt)("h4",{id:"configure-containerd"},"Configure ",(0,r.kt)("inlineCode",{parentName:"h4"},"containerd")),(0,r.kt)("p",null,"When running ",(0,r.kt)("inlineCode",{parentName:"p"},"Kubernetes")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"containerd"),", modify the configuration file typically located at ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/containerd/config.toml"),", to set up\n",(0,r.kt)("inlineCode",{parentName:"p"},"nvidia-container-runtime")," as the default low-level runtime:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'version = 2\n[plugins]\n  [plugins."io.containerd.grpc.v1.cri"]\n    [plugins."io.containerd.grpc.v1.cri".containerd]\n      default_runtime_name = "nvidia"\n\n      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]\n        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.nvidia]\n          privileged_without_host_devices = false\n          runtime_engine = ""\n          runtime_root = ""\n          runtime_type = "io.containerd.runc.v2"\n          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.nvidia.options]\n            BinaryName = "/usr/bin/nvidia-container-runtime"\n')),(0,r.kt)("p",null,"And then restart ",(0,r.kt)("inlineCode",{parentName:"p"},"containerd"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sudo systemctl daemon-reload && systemctl restart containerd\n")),(0,r.kt)("h3",{id:"label-your-nodes"},"Label your nodes"),(0,r.kt)("p",null,'Label your GPU nodes for scheduling with HAMi by adding the label "gpu=on". Without this label, the nodes cannot be managed by our scheduler.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl label nodes {nodeid} gpu=on\n")))}u.isMDXComponent=!0}}]);