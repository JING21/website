"use strict";(self.webpackChunk_project_hami_website=self.webpackChunk_project_hami_website||[]).push([[8921],{3905:(e,a,t)=>{t.d(a,{Zo:()=>s,kt:()=>u});var r=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var p=r.createContext({}),d=function(e){var a=r.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},s=function(e){var a=d(e.components);return r.createElement(p.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=d(t),u=n,f=m["".concat(p,".").concat(u)]||m[u]||c[u]||o;return t?r.createElement(f,l(l({ref:a},s),{},{components:t})):r.createElement(f,l({ref:a},s))}));function u(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var p in a)hasOwnProperty.call(a,p)&&(i[p]=a[p]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var d=2;d<o;d++)l[d]=t[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2587:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=t(7462),n=(t(7294),t(3905));const o={title:"Profiling Karmada"},l=void 0,i={unversionedId:"developers/profiling-karmada",id:"developers/profiling-karmada",title:"Profiling Karmada",description:"Enable profiling",source:"@site/docs/developers/profiling-karmada.md",sourceDirName:"developers",slug:"/developers/profiling-karmada",permalink:"/docs/next/developers/profiling-karmada",draft:!1,editUrl:"https://github.com/karmada-io/website/edit/main/docs/developers/profiling-karmada.md",tags:[],version:"current",lastUpdatedBy:"limengxuan",lastUpdatedAt:1713177637,formattedLastUpdatedAt:"Apr 15, 2024",frontMatter:{title:"Profiling Karmada"},sidebar:"docs",previous:{title:"globalview",permalink:"/docs/next/userguide/monitoring/globalview"},next:{title:"Performance Test Setup for Karmada",permalink:"/docs/next/developers/performance-test-setup-for-karmada"}},p={},d=[{value:"Enable profiling",id:"enable-profiling",level:2},{value:"Expose the endpoint at the local port",id:"expose-the-endpoint-at-the-local-port",level:2},{value:"Generate the data",id:"generate-the-data",level:2},{value:"Analyze the data",id:"analyze-the-data",level:2},{value:"Read more about profiling",id:"read-more-about-profiling",level:2}],s={toc:d};function c(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},s,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"enable-profiling"},"Enable profiling"),(0,n.kt)("p",null,"To profile Karmada components running inside a Kubernetes pod, set --enable-pprof flag to true in the yaml of Karmada components.\nThe default profiling address is 127.0.0.1:6060, and it can be configured via ",(0,n.kt)("inlineCode",{parentName:"p"},"--profiling-bind-address"),".\nThe components which are compiled by the Karmada source code support the flag above, including ",(0,n.kt)("inlineCode",{parentName:"p"},"Karmada-agent"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"Karmada-aggregated-apiserver"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"Karmada-controller-manager"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"Karmada-descheduler"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"Karmada-search"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"Karmada-scheduler"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"Karmada-scheduler-estimator"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"Karmada-webhook"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'--enable-pprof                                                                                                                                                                \n                Enable profiling via web interface host:port/debug/pprof/.\n--profiling-bind-address string                                                                                                                                               \n                The TCP address for serving profiling(e.g. 127.0.0.1:6060, :6060). This is only applicable if profiling is enabled. (default ":6060")\n\n')),(0,n.kt)("h2",{id:"expose-the-endpoint-at-the-local-port"},"Expose the endpoint at the local port"),(0,n.kt)("p",null,"You can get at the application in the pod by port forwarding with kubectl, for example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl -n karmada-system get pod\nNAME                                          READY   STATUS    RESTARTS   AGE\nkarmada-controller-manager-7567b44b67-8kt59   1/1     Running   0          19s\n...\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"$ kubectl -n karmada-system port-forward karmada-controller-manager-7567b44b67-8kt59 6060\nForwarding from 127.0.0.1:6060 -> 6060\nForwarding from [::1]:6060 -> 6060\n")),(0,n.kt)("p",null,"The HTTP endpoint will now be available as a local port."),(0,n.kt)("h2",{id:"generate-the-data"},"Generate the data"),(0,n.kt)("p",null,"You can then generate the file for the memory profile with curl and pipe the data to a file:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"$ curl http://localhost:6060/debug/pprof/heap  > heap.pprof\n")),(0,n.kt)("p",null,"Generate the file for the CPU profile with curl and pipe the data to a file (7200 seconds is two hours):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},'curl "http://localhost:6060/debug/pprof/profile?seconds=7200" > cpu.pprof\n')),(0,n.kt)("h2",{id:"analyze-the-data"},"Analyze the data"),(0,n.kt)("p",null,"To analyze the data:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"go tool pprof heap.pprof\n")),(0,n.kt)("h2",{id:"read-more-about-profiling"},"Read more about profiling"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("a",{parentName:"li",href:"https://danlimerick.wordpress.com/2017/01/24/profiling-golang-programs-on-kubernetes/"},"Profiling Golang Programs on Kubernetes")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("a",{parentName:"li",href:"https://blog.golang.org/pprof"},"Official Go blog"))))}c.isMDXComponent=!0}}]);